#include "matrix_util.h"
#include "mersenne_twister.h"

int main(void) {
    const int seed = 0;
    init_genrand(seed);

    magma_init();
    const int Dmat = 1000;
    double *mat_h, *mat_d;
    double *w, *wA, *work, *iwork;

    magma_int_t info;
    magma_int_t nb = magma_get_dsytrd_nb(Dmat);
    magma_queue_t queue=NULL;
    magma_int_t dev = 0;
    magma_queue_create( dev, &queue );
    
    magma_dmalloc_pinned( &mat_h, Dmat*Dmat ); 
    magma_dmalloc( (void**)&mat_d, Dmat*Dmat );
    magma_dalloc_cpu( &w, Dmat );
    magma_dalloc_cpu( &wA, Dmat*Dmat );

    int temp1 = 2*Dmat +Dmat*nb;
    int temp2 = 1+6*Dmat+2*Dmat*Dmat;
    magma_int_t lwork;
    if(temp1 < temp2) lwork = temp2;
    else lwork = temp1;
    magma_dalloc_cpu( &work, lwork );

    magma_int_t liwork = 3+5*Dmat;
    magma_dalloc_cpu( &iwork, liwork );
    
    for(int i=0;i < Dmat; ++i) {
      mat_h[i+Dmat*i] = genrand_real3();
      for(int j=0;j < i; ++j) {
	mat_h[i+Dmat*j] = genrand_real3();
	mat_h[j+Dmat*i] = mat_h[i+Dmat*j];
      }
    }

    magma_dsetmatrix(Dmat, Dmat, mat_h, Dmat, mat_d, Dmat, queue);
    magma_dsyevd_gpu(MagmaVec, MagmaUpper, Dmat, mat_d, Dmat, w, wA, Dmat, work, lwork, iwork, liwork, &info);
    
    return 0;
}
